{"version":3,"sources":["logo.svg","Title.js","DadJoke.js","Scooters.js","Busses.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","console","log","DadJoke","useState","joke","setJoke","useEffect","fetch","then","response","json","data","children","className","title","selftext","service","createEnturService","clientName","Scooters","scooters","setScooters","getScootersByPosition","latitude","longitude","map","station","Station","props","operator","lat","lon","battery","EnturService","Departure","departure","expectedDepartureTime","destinationDisplay","serviceJourney","departureTime","DateTime","fromISO","timeTilDeparture","calculateTimeTilDeparture","journeyPattern","line","publicCode","frontText","now","local","minuteFloat","diff","toObject","minutes","flooredMinute","Math","floor","Busses","departures","setDepartures","departuresFromCenter","setDeparturesFromCenter","departuresToCenter","setDeparturesToCenter","refresh","getDeparturesFromStopPlace","filter","d","quay","id","slice","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.baf2360d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst Title = () => {\n    console.log(\"tittel\");\n\n    return (\n        <h1>Infoskjerm</h1>\n    );\n};\n\nexport default Title;","import React, { useEffect, useState } from \"react\";\n\nconst DadJoke = () => {\n    const [joke, setJoke] = useState({});\n\n    useEffect(() => {\n        console.log(\"component rendered\");\n        fetch(\"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\")\n        .then((response) => response.json())\n        .then((json) => setJoke(json.data.children[0].data));\n    }, []);\n\n    console.log(joke);\n\n    return (\n        <div className=\"reddit\">\n            <p>{joke.title}</p>\n            <p>{joke.selftext}</p>\n        </div>\n    );    \n};\n\nexport default DadJoke;","import React, { useEffect, useState } from \"react\";\nimport createEnturService from \"@entur/sdk\";\n\nconst service = createEnturService({\n    clientName: \"skaug-infoskjerm\",\n});\n\nconst Scooters = () => {\n    const [scooters, setScooters] = useState([]);\n\n    useEffect(() => {\n        service.getScootersByPosition(\n            {\n                latitude: 63.409351,\n                longitude: 10.431701,\n            }\n        )\n        .then((data) => setScooters(data));\n    }, []);\n\n    return (\n        <div className=\"Scooters\">\n            <h2>Scootere:</h2>\n            { \n                scooters.map((station) => (\n                    <Station station={station}/>    \n                ))\n            }\n        </div>\n    );\n};\n\nexport default Scooters;\n\nconst Station = (props) => {\n    const{operator, lat, lon, battery} = props.station;\n    return <div className=\"station\">\n        {operator} - {lat}, {lon} : {battery}%\n    </div>\n};","import React, { useState, useEffect } from \"react\";\nimport EnturService from \"@entur/sdk\";\nimport { DateTime } from \"luxon\";\n\nconst service = new EnturService({ clientName: \"skaug-infoskjerm\" });\n\nconst Busses = (props) => {\n  const [departures, setDepartures] = useState([]);\n  const [departuresFromCenter, setDeparturesFromCenter] = useState([]);\n  const [departuresToCenter, setDeparturesToCenter] = useState([]);\n  const { refresh } = props;\n\n  const id = \"NSR:StopPlace:42743\";\n\n  const fromCenter = \"NSR:Quay:73261\";\n  const toCenter = \"NSR:Quay:73260\";\n\n  const size = 6;\n\n  useEffect(() => {\n    service.getDeparturesFromStopPlace(id).then((data) => setDepartures(data));\n  }, [refresh]);\n\n  useEffect(() => {\n    setDeparturesFromCenter(departures.filter((d) => d.quay.id === fromCenter));\n    setDeparturesToCenter(departures.filter((d) => d.quay.id === toCenter));\n  }, [departures]);\n\n  return (\n    <div className=\"busses\">\n        <h2>Buss:</h2>\n      <div className=\"from\">\n        <h3>Fra Sentrum</h3>\n        {departuresFromCenter.slice(0, size).map((departure) => (\n          <Departure key={departure.serviceJourney.id} departure={departure} />\n        ))}\n      </div>\n      <div className=\"towards\">\n        <h3>Mot Sentrum</h3>\n        {departuresToCenter.slice(0, size).map((departure) => (\n          <Departure key={departure.serviceJourney.id} departure={departure} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Departure = (props) => {\n  const { departure } = props;\n  const { expectedDepartureTime, destinationDisplay, serviceJourney } = departure;\n  const departureTime = DateTime.fromISO(expectedDepartureTime);\n  const timeTilDeparture = calculateTimeTilDeparture(departureTime);\n  return (\n    <div className=\"departure\">\n      {serviceJourney.journeyPattern.line.publicCode} - {destinationDisplay.frontText} : {timeTilDeparture}\n    </div>\n  );\n};\n\nconst calculateTimeTilDeparture = (departureTime) => {\n  const now = DateTime.local();\n  const diff = departureTime.diff(now, \"minutes\");\n  const minuteFloat = diff.toObject().minutes;\n  const flooredMinute = Math.floor(minuteFloat);\n  const semanticTimeToDeparture =\n    flooredMinute === 0 ? \"NÃ¥\" : flooredMinute + \" min\";\n  return semanticTimeToDeparture;\n};\n\nexport default Busses;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Title from './Title';\nimport DadJoke from './DadJoke';\nimport Scooters from './Scooters';\nimport Busses from './Busses';\n\nfunction App() {\n  console.log(\"Heisann\");\n  return (\n    <div className=\"App\">\n      <Title />\n      <DadJoke />\n      <Scooters />\n      <Busses />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}